let express,cors,bodyParser,http,modules;_dad‍.x([["start",()=>start],["lower",()=>lower],["default",()=>_dad‍.o]]);_dad‍.w("express",[["default",["express"],function(v){express=v}]]);_dad‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_dad‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_dad‍.w("http",[["default",["http"],function(v){http=v}]]);_dad‍.w("../modules",[["default",["modules"],function(v){modules=v}]]);





const app = express();

app.enable('trust proxy');

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cors({origin: '*'}));

const port = parseInt(process.env.PORT || 8000, 10); // Get port from environment

/* configure port to app */
app.set('port', port);

/* configure routes */
   modules(app);


/**
 * Create HTTP server.
 */
const server = http.createServer(app);

const isTest = process.env.NODE_ENV === 'test';
const isProduction = process.env.NODE_ENV === 'production';

/**
 * Bind onError and onListening handler
 */
server.on('error', error => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(`${bind} requires elevated privileges`); // eslint-disable-line no-console
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`${bind} is already in use`); // eslint-disable-line no-console
            process.exit(1);
            break;
        default:
            throw error;
    }
});

server.on('listening', () => {
    const address = server.address();
    const bind = typeof address === 'string' ? `pipe ${address}` : `port ${address.port}`;
    console.log(`Listening on ${bind}`);
});

       function start(done) {
  server.listen(port, done);
}

       function lower(done) {
    server.close(done);
}

_dad‍.d(app);